//
// Copyright (C) 2022 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

cc_defaults {
    name: "bcc_bpf_defaults",
    compile_multilib: "first",
    cflags: [
        "--target=bpf",
        "-fno-function-sections",
        "-fno-stack-protector",
        "-fno-unwind-tables",
        "-mcpu=generic",
        "-Wno-unused-command-line-argument",
    ],
    header_libs: [
        "bpf_prog_headers",
    ],
    generated_headers: ["libbpf_headers"],
    arch: {
        arm: {
            local_include_dirs: ["arm64"],
            cflags: [
                "-D__TARGET_ARCH_arm64",
            ],
        },
        arm64: {
            local_include_dirs: ["arm64"],
            cflags: [
                "-D__TARGET_ARCH_arm64",
            ],
        },
        x86: {
            local_include_dirs: ["x86"],
            cflags: [
                "-D__TARGET_ARCH_x86"
            ],
        },
        x86_64: {
            local_include_dirs: ["x86"],
            cflags: [
                "-D__TARGET_ARCH_x86"
            ],
        },
    },
    visibility: ["//visibility:private"],
}

genrule_defaults {
    name: "bpf_skeleton_hdr_defaults",
    tools: ["bpftool"],
    cmd: "$(location bpftool) gen skeleton $(in) > $(out)",
    visibility: ["//visibility:private"],
    arch: {
        arm: {
            enabled: false,
        },
        x86: {
            enabled: false,
        },
    },
}

cc_defaults {
    name: "bcc_binary_defaults",
    generated_headers: [
        "libbpf_headers",
    ],
    static_libs: [
        "libbpf",
        "libelf",
        "libz",
    ],
    cflags: [
        "-Wno-pointer-bool-conversion",
        "-Wno-unused-parameter",
    ],
    arch: {
        arm: {
            enabled: false,
        },
        x86: {
            enabled: false,
        },
    },
}

cc_object {
    name: "ksnoop.bpf.o",
    srcs: ["ksnoop.bpf.c"],
    defaults: ["bcc_bpf_defaults"],
}

genrule {
    name: "ksnoop.skel.h",
    srcs: [":ksnoop.bpf.o"],
    out: ["ksnoop.skel.h"],
    defaults: ["bpf_skeleton_hdr_defaults"],
}

cc_binary {
    name: "ksnoop",
    srcs: ["ksnoop.c"],
    generated_headers: ["ksnoop.skel.h"],
    defaults: ["bcc_binary_defaults"],
}
